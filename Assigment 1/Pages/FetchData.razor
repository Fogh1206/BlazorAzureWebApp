@page "/fetchdata"

@using Assigment_1.Data
@using ChartJs.Blazor
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using Models
@inject IAdultService AdultService
@inject NavigationManager NavigationManager;

<h1>Adults List</h1>
<div id="block_container">
    <label for="search">Name To search:</label><br>
    <input type="text" @bind="@SearchPhrase" @oninput="@((e) => { SearchPhrase = (string) e.Value; })"><br>
    <input type="submit" value="Submit" @onclick="Search">
    <input type="submit" value="Generate" @onclick="Generate">
</div>

@if (Adults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table" id="datatable">
        <thead>
        <tr>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>JobTitle</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in Adults)
        {
            <tr @onclick="@(() => NavigateToComponent(adult))">
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age</td>
                <td>@adult.Weight</td>
                <td>@adult.Height</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle.JobTitle</td>
            </tr>
        }
        </tbody>
    </table>
    <Chart Config="_config"></Chart>
}

@code
{
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    public string SearchPhrase;
    private PieConfig _config;
    public IList<Adult> Adults { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/Login");
        }
        else
        {
            Adults = AdultService.AdultsList;
            CreatePie();
            PopulatePie();
        }
    }

    private void NavigateToComponent(Adult p)
    {
        NavigationManager.NavigateTo("AdultPage/" + p.Id);
    }

    private void Search()
    {
        
        NavigationManager.NavigateTo("SearchResult/" + SearchPhrase);
        Console.WriteLine("Hello");
    }

    private void CreatePie()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Male to Female Ratio"
                }
            }
        };

        foreach (string color in new[] {"Male", "Female"})
        {
            _config.Data.Labels.Add(color);
        }
    }

    private void PopulatePie()
    {
        int male = 0;
        int female = 0;
        foreach (var adult in Adults)
        {
            if (adult.Sex.Equals("M"))
            {
                male += 1;
            }
            else
            {
                female += 1;
            }
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] {male, female})
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132),
                ColorUtil.ColorHexString(255, 205, 86),
            }
        };
        _config.Data.Datasets.Add(dataset);
    }

    private void Generate()
    {
        _config.Data.Datasets.Clear();
        PopulatePie();
    }
}